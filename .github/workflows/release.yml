name: Package and release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  create-release:
    name: Create Release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_version: ${{ steps.get_version.outputs.VERSION }}

    runs-on: ubuntu-latest
    steps:
      - name: Get the tag version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: true

  build-and-release-linux:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Package Application
        uses: diggerhq/pyinstaller-action-linux@main
        with:
          path: ./

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          cd dist/dg-linux
          zip -r ../../dg-linux-${{needs.create-release.outputs.tag_version}}.zip dg
          cd ../../

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: dg-linux-${{needs.create-release.outputs.tag_version}}.zip
          asset_name: dg-linux-${{needs.create-release.outputs.tag_version}}.zip
          asset_content_type: application/zip

      - name: Upload to S3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to S3
        run: >
            aws s3 cp --acl public-read
            dg-linux-${{needs.create-release.outputs.tag_version}}.zip
            s3://digger-releases/linux/dg-linux-${{needs.create-release.outputs.tag_version}}.zip
        working-directory: .


  build-and-release-linuxmacos:
    needs: create-release
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v1

      - name: perform pyinstaller build
        run: ./scripts/buildformac.sh

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          cd dist/dg-mac
          zip -r ../../dg-darwin-${{needs.create-release.outputs.tag_version}}.zip dg
          cd ../../

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: dg-darwin-${{needs.create-release.outputs.tag_version}}.zip
          asset_name: dg-darwin-${{needs.create-release.outputs.tag_version}}.zip
          asset_content_type: application/zip

      - name: Upload to S3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Deploy to S3
        run: >
            aws s3 cp --acl public-read
            dg-darwin-${{needs.create-release.outputs.tag_version}}.zip
            s3://digger-releases/darwin/dg-darwin-${{needs.create-release.outputs.tag_version}}.zip
        working-directory: .

  update-latest-stable-version:
    needs: 
      - create-release
      - build-and-release-linux
      - build-and-release-linuxmacos

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: initialize s3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: upload version
        run: >
            echo ${{needs.create-release.outputs.tag_version}} >> STABLE-VERSION &&
            aws s3 cp --acl public-read
            STABLE-VERSION
            s3://digger-releases/STABLE-VERSION
        working-directory: .

  push-to-ecr:
    needs:
      - create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: initialize awscli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: build and push to ecr
        run: >
            export TAG=${{needs.create-release.outputs.tag_version}}
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/g1x6q1x1
            docker build -e tag=$TAG -t dg -f docker/Dockerfile.ecr.publish .
            docker tag dg:latest public.ecr.aws/g1x6q1x1/dg:$TAG
            docker push public.ecr.aws/g1x6q1x1/dg:$TAG

