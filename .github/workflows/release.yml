name: Package and release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  create-release:
    name: Create Release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: true

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Package Application
        uses: diggerhq/pyinstaller-action-linux@main
        with:
          path: src

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip -r dg-linux.zip src/dist/dg-linux

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: dg-linux.zip
          asset_name: dg-linux.zip
          asset_content_type: application/zip

  build-macos:
    needs: create-release
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - name: perform pyinstaller build
        run: ./scripts/buildformac.sh

      - uses: actions/upload-artifact@v2
        id: upload_artefact
        with:
          name: dg-darwin
          path: src/dist/dg-mac

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip -r dg-darwin.zip mac

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: dg-darwin.zip
          asset_name: dg-darwin.zip
          asset_content_type: application/zip


